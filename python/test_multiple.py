from cmodel import *
import numpy as np

import ctypes



lib_fn = "/workspace/atomic_exec/build/libatomic_exec.so"
kernel_fn = "/workspace/atomic_exec/firmware_core/build/libbm1684x_kernel_module.so"

lib = lib_wrapper(open_lib(lib_fn))
lib.init_handle(ctypes.create_string_buffer(kernel_fn.encode()))

reserved_offset = 605028352
reserved_offset = 0

weight = np.arange(4).astype(np.float32)
weight_addr = 4294967296 + reserved_offset
data = np.arange(16).astype(np.float32)
data_addr = 4294971392 + reserved_offset
output = np.zeros(9).astype(np.float32)
output_address = 4294975488 + reserved_offset

temp_output = np.zeros_like(16)

s2d_ret = lib.chip_s2d(
    ctypes.c_uint64(weight_addr),
    weight.size * 4,
    weight.ctypes.data_as(ctypes.c_void_p),
)
check_data(weight, weight_addr, lib)
s2d_ret = lib.chip_s2d(
    ctypes.c_uint64(data_addr), data.size * 4, data.ctypes.data_as(ctypes.c_void_p)
)

check_data(data, data_addr, lib)


cmds = b""
command_length = []
# 1
cmd = b"&\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00\x04\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10$\x01\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff"  # 1, 0 0b1000100110
cmds += cmd
command_length.append(len(cmd))
cmd = b"&\x04\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00\x04\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x10$\x01\x00\x00\x00\x00@\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff"  # 2, 0 0b10000100110
cmds += cmd
command_length.append(len(cmd))
cmd = b'\x03\x00@\x00\x00\x00\x80\x00$\x01\x00"\x02\x00\x18\x00\x00\x00\x00\x00\x01\x00\x01\x00\x03\x00\x03\x00\x01\x00\x04\x00\x04\x00\x02\x00\x02\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'  # 1, 2 0b10000000000000000000011
cmds += cmd
command_length.append(len(cmd))
cmd = b"&\x06\x00\x00\x00\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\t\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00\x03\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x08\x00\x00\x00\x00\x00 \x10$\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff"  # 3, 1 0b11000100110
cmds += cmd
command_length.append(len(cmd))

command_type = np.array([1, 1, 0, 1], dtype=np.int32)
command_length = np.array(command_length, dtype=np.int32)


ret = lib.launch_cmds(
    ctypes.create_string_buffer(cmds),
    command_type.ctypes.data_as(ctypes.c_void_p),
    command_length.ctypes.data_as(ctypes.c_void_p),
    4,
)


d2s_ret = lib.chip_d2s(
    ctypes.c_uint64(output_address),
    output.size * 4,
    output.ctypes.data_as(ctypes.c_void_p),
)
# lib.chip_d2s

print(output)
lib.deinit()
